<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dictionary SYSTEM "file://localhost/System/Library/DTDs/sdef.dtd">
<!-- @version(10.4) -->
<dictionary title="Spark Terminology">
	<suite name="Standard Suite" code="core" description="Base Suite">
		<value-type name="image" code="imaA" description="an image">
			<cocoa class="NSImage"/>
		</value-type>
		<value-type name="bundle" code="bunN">
			<cocoa class="NSBundle"/>
		</value-type>
		<enumeration name="save options" code="savo">
			<enumerator name="yes" code="yes " description="Save the file."/>
			<enumerator name="no" code="no  " description="Do not save the file."/>
			<enumerator name="ask" code="ask " description="Ask the user whether or not to save the file."/>
		</enumeration>
		<class name="item" code="cobj" description="A scriptable object.">
			<cocoa class="AbstractObject"/>
			<property name="class" code="pcls" description="The class of the object." type="type" access="r">
				<cocoa key="classCode"/>
			</property>
			<property name="properties" code="pALL" description="All of the object&apos;s properties." type="record">
				<cocoa key="scriptingProperties"/>
			</property>
			<!--
						The blank method declarations are needed to emulate the existing
						NSCoreSuite.scriptSuite.framework.  Ordinarily, you wouldn't do this.
					-->
			<responds-to name="count">
				<cocoa method=""/>
			</responds-to>
			<responds-to name="delete">
				<cocoa method=""/>
			</responds-to>
			<responds-to name="duplicate">
				<cocoa method=""/>
			</responds-to>
			<responds-to name="exists">
				<cocoa method=""/>
			</responds-to>
			<responds-to name="get">
				<cocoa method=""/>
			</responds-to>
			<responds-to name="move">
				<cocoa method=""/>
			</responds-to>
			<responds-to name="set">
				<cocoa method=""/>
			</responds-to>
		</class>
		<class name="color" code="colr" description="A color." inherits="item">
			<cocoa class="NSColor"/>
		</class>
		<class name="window" code="cwin" description="A window." inherits="item">
			<cocoa class="NSWindow"/>
			<property name="name" code="pnam" description="The full title of the window." type="text">
				<cocoa key="title"/>
			</property>
			<property name="id" code="ID  " description="The unique identifier of the window." type="number" access="r">
				<cocoa key="uniqueID"/>
			</property>
			<property name="bounds" code="pbnd" description="The bounding rectangle of the window." type="rectangle">
				<cocoa key="boundsAsQDRect"/>
			</property>
			<property name="closeable" code="hclb" description="Whether the window has a close box." type="boolean" access="r">
				<cocoa key="hasCloseBox"/>
			</property>
			<property name="titled" code="ptit" description="Whether the window has a title bar." type="boolean" access="r">
				<cocoa key="hasTitleBar"/>
			</property>
			<!-- the type is supposed to be "integer" -->
			<property name="index" code="pidx" description="The index of the window in the back-to-front window ordering." type="number">
				<cocoa key="orderedIndex"/>
			</property>
			<property name="floating" code="isfl" description="Whether the window floats." type="boolean" access="r">
				<cocoa key="isFloatingPanel"/>
			</property>
			<property name="miniaturizable" code="ismn" description="Whether the window can be miniaturized." type="boolean" access="r">
				<cocoa key="isMiniaturizable"/>
			</property>
			<property name="miniaturized" code="pmnd" description="Whether the window is currently miniaturized." type="boolean">
				<cocoa key="isMiniaturized"/>
			</property>
			<property name="modal" code="pmod" description="Whether the window is the application&apos;s current modal window." type="boolean" access="r">
				<cocoa key="isModalPanel"/>
			</property>
			<property name="resizable" code="prsz" description="Whether the window can be resized." type="boolean" access="r">
				<cocoa key="isResizable"/>
			</property>
			<property name="visible" code="pvis" description="Whether the window is currently visible." type="boolean">
				<cocoa key="isVisible"/>
			</property>
			<property name="zoomable" code="iszm" description="Whether the window can be zoomed." type="boolean" access="r">
				<cocoa key="isZoomable"/>
			</property>
			<property name="zoomed" code="pzum" description="Whether the window is currently zoomed." type="boolean">
				<cocoa key="isZoomed"/>
			</property>
			<responds-to name="close">
				<cocoa method="handleCloseScriptCommand:"/>
			</responds-to>
			<responds-to name="save">
				<cocoa method="handleSaveScriptCommand:"/>
			</responds-to>
		</class>
		<!-- The old Core Suite: the object model commands, plus a few more. -->
		<command name="close" code="coreclos" description="Close an object.">
			<cocoa class="NSCloseCommand"/>
			<direct-parameter description="the object to close" type="specifier"/>
			<parameter name="saving" code="savo" description="Specifies whether changes should be saved before closing." type="save options" optional="yes">
				<cocoa key="SaveOptions"/>
			</parameter>
			<parameter name="saving in" code="kfil" description="The file in which to save the object." type="file" optional="yes">
				<cocoa key="File"/>
			</parameter>
		</command>
		<command name="count" code="corecnte" description="Return the number of elements of a particular class within an object.">
			<cocoa class="NSCountCommand"/>
			<direct-parameter description="the object whose elements are to be counted" type="specifier"/>
			<parameter name="each" code="kocl" description="The class of objects to be counted." type="type" optional="yes">
				<cocoa key="ObjectClass"/>
			</parameter>
			<result description="the number of elements" type="integer"/>
		</command>
		<command name="delete" code="coredelo" description="Delete an object.">
			<cocoa class="NSDeleteCommand"/>
			<direct-parameter description="the object to delete" type="specifier"/>
		</command>
		<command name="duplicate" code="coreclon" description="Copy object(s) and put the copies at a new location.">
			<cocoa name="Copy" class="NSCloneCommand"/>
			<direct-parameter description="the object(s) to duplicate" type="specifier"/>
			<!-- "duplicate" is supposed to return the new objects.
				<result type="object" description="to the duplicated object(s)"/>
				-->
			<!-- "to" is supposed to be optional. -->
			<parameter name="to" code="insh" description="The location for the new object(s)." type="location specifier">
				<cocoa key="ToLocation"/>
			</parameter>
			<parameter name="with properties" code="prdt" description="Properties to be set in the new duplicated object(s)." type="record" optional="yes">
				<cocoa key="WithProperties"/>
			</parameter>
		</command>
		<command name="exists" code="coredoex" description="Verify if an object exists.">
			<cocoa class="NSExistsCommand"/>
			<direct-parameter description="the object in question" type="specifier"/>
			<result description="true if it exists, false if not" type="boolean"/>
		</command>
		<!-- "get" is supposed to be hidden. -->
		<command name="get" code="coregetd" description="Get the data for an object.">
			<cocoa class="NSGetCommand"/>
			<direct-parameter type="specifier"/>
			<result type="any"/>
		</command>
		<command name="make" code="corecrel" description="Make a new object.">
			<cocoa name="Create" class="NSCreateCommand"/>
			<parameter name="new" code="kocl" description="The class of the new object." type="type">
				<cocoa key="ObjectClass"/>
			</parameter>
			<parameter name="at" code="insh" description="The location at which to insert the object." type="location specifier" optional="yes">
				<cocoa key="Location"/>
			</parameter>
			<parameter name="with data" code="data" description="The initial data for the object." type="any" optional="yes">
				<cocoa key="ObjectData"/>
			</parameter>
			<parameter name="with properties" code="prdt" description="The initial values for properties of the object." type="record" optional="yes">
				<cocoa key="KeyDictionary"/>
			</parameter>
			<result description="to the new object" type="specifier"/>
		</command>
		<command name="move" code="coremove" description="Move object(s) to a new location.">
			<cocoa class="NSMoveCommand"/>
			<direct-parameter description="the object(s) to move" type="specifier"/>
			<!-- "move" is supposed to return the relocated objects.
				<result type="object" description="to the object(s) after they have been moved"/>
				-->
			<parameter name="to" code="insh" description="The new location for the object(s)." type="location specifier">
				<cocoa key="ToLocation"/>
			</parameter>
		</command>
		<!-- The old Standard Suite: run, reopen, open, print, and quit. -->
		<command name="open" code="aevtodoc" description="Open an object.">
			<direct-parameter description="The file(s) to be opened." type="file"/>
		</command>
		<command name="quit" code="aevtquit" description="Quit an application.">
			<cocoa class="NSQuitCommand"/>
			<parameter name="saving" code="savo" description="Specifies whether changes should be saved before quitting." type="save options" optional="yes">
				<cocoa key="SaveOptions"/>
			</parameter>
		</command>
		<command name="save" code="coresave" description="Save an object.">
			<direct-parameter description="the object to save, usually a document or window" type="specifier"/>
			<parameter name="in" code="kfil" description="The file in which to save the object." type="file" optional="yes">
				<cocoa key="File"/>
			</parameter>
			<parameter name="as" code="fltp" description="The file type in which to save the data." type="text" optional="yes">
				<cocoa key="FileType"/>
			</parameter>
		</command>
		<!-- "set" is supposed to be hidden. -->
		<command name="set" code="coresetd" description="Set an object&apos;s data.">
			<cocoa class="NSSetCommand"/>
			<direct-parameter type="specifier"/>
			<!-- "set" is supposed to return the fully evaluated "to" data.
				<result type="any"/>
				-->
			<parameter name="to" code="data" description="The new value." type="any">
				<cocoa key="Value"/>
			</parameter>
		</command>
	</suite>
	<suite name="Spark Suite" code="SpSu">
		<class name="plugin" code="cPlg" description="Spark Action Plugin" plural="plugins" inherits="item">
			<cocoa class="SparkPlugIn"/>
			<property name="icon" code="pIco" description="Plugin icon" type="image"/>
			<property name="path" code="pPth" description="Plugin Path" type="text"/>
			<property name="bundle" code="pBun" description="Plugin Bundle" type="bundle"/>
		</class>
		<class name="library" code="cLib" description="Spark Object library" plural="libraries" inherits="item">
			<cocoa class="SparkLibrary"/>
			<element type="action">
				<accessor style="id"/>
			</element>
			<element type="trigger">
				<accessor style="id"/>
			</element>
			<property name="location" code="pLoc" description="Library persistent location" type="file">
				<cocoa key="location"/>
			</property>
		</class>
		<class name="action" code="cAct" description="Spark Action" plural="actions" inherits="spark object">
			<cocoa class="SparkAction"/>
			<property name="version" code="vers" description="Action version" type="integer"/>
			<property name="categorie" code="pCat" type="text" access="r"/>
			<property name="description" code="pDes" type="text">
				<cocoa key="actionDescription"/>
			</property>
		</class>
		<class name="trigger" code="cTrg" description="Spark Trigger" plural="triggers">
			<cocoa class="SparkTrigger"/>
		</class>
		<class hidden="yes" name="spark object" code="cSpO" description="Abstract Spark Object" plural="spark objects" inherits="item">
			<cocoa class="SparkObject"/>
			<property name="uid" code="ID  " description="Uniq identifier" type="integer">
				<cocoa key="uid"/>
			</property>
			<property name="icon" code="pIco" description="Object icon" type="image"/>
			<property name="name" code="pnam" description="Object name" type="text"/>
			<property name="library" code="pLib" description="Parent library" type="library" access="r">
				<cocoa key="library"/>
			</property>
		</class>
	</suite>
	<suite name="Spark Editor Suite" code="Sprk" description="Some Spark privates extensions. Do not use please!.">
		<cocoa name="SparkSuite"/>
		<enumeration hidden="yes" name="daemon status" code="dast">
			<enumerator name="started" code="strt" description="Daemon started."/>
			<enumerator name="stopped" code="stop" description="Daemon stopped."/>
			<enumerator name="error" code="erro" description="Error prevent starting."/>
		</enumeration>
		<class name="application" code="capp" description="Spark application object." plural="applications" inherits="item">
			<contents name="contents" description="Main Spark library" type="library">
				<cocoa key="library"/>
			</contents>
			<cocoa class="SparkEditor"/>
			<element description="Spark plugin" type="plugin"/>
			<element type="window" access="r">
				<cocoa key="orderedWindows"/>
			</element>
			<property name="name" code="pnam" description="The name of the application." type="text" access="r"/>
			<property name="version" code="vers" description="The version of the application." type="text" access="r"/>
			<property name="frontmost" code="pisf" description="Is this the frontmost (active) application?" type="boolean" access="r">
				<cocoa key="isActive"/>
			</property>
			<property hidden="yes" name="trapping" code="Trap" description="If Editor is currently trapping keyboards event." type="boolean" access="r">
				<cocoa key="trapping"/>
			</property>
			<!--hidden=&quot;hidden&quot;-->
			<property hidden="yes" name="daemon status" code="srvS" description="Status of the daemon application." type="daemon status">
				<cocoa key="serverStatus"/>
			</property>
			<responds-to name="open">
				<cocoa method="handleOpenScriptCommand:"/>
			</responds-to>
			<responds-to name="quit">
				<cocoa method="handleQuitScriptCommand:"/>
			</responds-to>
			<responds-to name="show help">
				<cocoa method="handleHelpScriptCommand:"/>
			</responds-to>
		</class>
		<command name="show help" code="SprkHelp" description="Open the plugins help.">
			<parameter name="page" code="page" description="Plugin name." type="text" optional="yes">
				<cocoa key="Page"/>
			</parameter>
		</command>
	</suite>
</dictionary>