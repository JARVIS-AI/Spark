<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dictionary SYSTEM "file://localhost/System/Library/DTDs/sdef.dtd">
<dictionary title="Spark Daemon Terminology">
	<suite name="Spark Daemon Suite" code="SpDa" description="Spark Script Suite terminology.">
		<cocoa name="SparkDaemonSuite"/>
		<class name="item" code="cobj" description="A scriptable object.">
			<cocoa class="AbstractObject"/>
			<property name="class" code="pcls" description="The class of the object." type="type" access="r">
				<cocoa key="classCode"/>
			</property>
			<property name="properties" code="pALL" description="All of the object&apos;s properties." type="record">
				<cocoa key="scriptingProperties"/>
			</property>
			<!--
						The blank method declarations are needed to emulate the existing
						NSCoreSuite.scriptSuite.framework.  Ordinarily, you wouldn't do this.
					-->
			<responds-to name="count">
				<cocoa method=""/>
			</responds-to>
			<responds-to name="delete">
				<cocoa method=""/>
			</responds-to>
			<responds-to name="duplicate">
				<cocoa method=""/>
			</responds-to>
			<responds-to name="exists">
				<cocoa method=""/>
			</responds-to>
			<responds-to name="get">
				<cocoa method=""/>
			</responds-to>
			<responds-to name="move">
				<cocoa method=""/>
			</responds-to>
			<responds-to name="set">
				<cocoa method=""/>
			</responds-to>
		</class>
		<class name="spark item" code="SpIt" description="An Abstract class." plural="spark items" inherits="item">
			<cocoa class="SparkLibraryObject"/>
			<property name="uid" code="ID  " description="The UID of this item." type="integer" access="r">
				<cocoa method="uid"/>
			</property>
			<property name="name" code="pnam" description="The name of this item." type="text" access="r">
				<cocoa method="name"/>
			</property>
			<property name="icon" code="Icon" description="Icon of this item." type="specifier" access="r">
				<cocoa method="icon"/>
			</property>
		</class>
		<class name="hotkey" code="HoKe" description="A Spark Hotkey." plural="hotkeys" inherits="spark item">
			<cocoa class="SparkHotKey"/>
			<property name="activated" code="Acti" description="Define if the Hotkey is active." type="boolean" access="rw">
				<cocoa method="active"/>
			</property>
			<property name="shortcut" code="ShCu" description="String representation for this Hotkey Shortcut." type="text" access="r">
				<cocoa method="shortCut"/>
			</property>
			<property name="character" code="Char" description="The character for this Hotkey." type="integer" access="r">
				<cocoa method="character"/>
			</property>
			<property name="keycode" code="KeCo" description="Virtual Keycode for this Hotkey." type="integer" access="r">
				<cocoa method="keycode"/>
			</property>
			<property name="modifier" code="Modi" description="Modifier for this Hotkey." type="integer" access="r">
				<cocoa method="modifier"/>
			</property>
			<responds-to name="invoke">
				<cocoa method="handleInvokeHotKeyScriptCommand:"/>
			</responds-to>
		</class>
		<class name="application" code="capp" description="Spark Application.">
			<cocoa class="NSApplication"/>
			<element type="hotkey" access="r">
				<cocoa key="hotkeys"/>
			</element>
			<property name="name" code="pnam" description="The name of the application." type="text" access="r"/>
			<property name="version" code="vers" description="The version of the application." type="text" access="r"/>
			<responds-to name="quit">
				<cocoa method="handleQuitScriptCommand:"/>
			</responds-to>
		</class>
		<command name="invoke" code="SprkInvo" description="Execute an Hotkey.">
			<direct-parameter description="The HotKey to execute." type="hotkey"/>
			<result description="true if execution perform without error" type="boolean"/>
		</command>
		<command name="quit" code="aevtquit" description="Quit an application.">
			<cocoa class="NSQuitCommand"/>
			<parameter name="saving" code="savo" description="Specifies whether changes should be saved before quitting." type="save options" optional="yes">
				<cocoa key="SaveOptions"/>
			</parameter>
		</command>
	</suite>
</dictionary>